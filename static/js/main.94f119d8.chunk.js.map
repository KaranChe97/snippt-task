{"version":3,"sources":["Components/MultiSelect.js","Components/ColumnCreator.js","Components/EnterData.js","Components/tableHeader.js","Components/TableEntry.js","Components/showTable.js","Components/ParentComponent.js","App.js","serviceWorker.js","index.js"],"names":["MultiSelect","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleMultiValue","onChangeHandler","e","setState","multiValue","value","state","sportsData","react_default","a","createElement","id","multiselect_component","name","dataSource","allowCustomValue","placeholder","change","React","Component","ColumnCreator","handleChange","defineProperty","target","data","concat","toConsumableArray","addColumn","addHeaders","intialState","submitColumn","submitHeader","colType","colName","type","onChange","defaultValue","Components_MultiSelect","onClick","EnterData","preventDefault","localdata","sendData","writeData","a1","a2","key1","key2","map","index","key","TableHeader","tableData","toUpperCase","TableEntry","editableDataLocal","index1","index2","submitTable","enteredData","displayTable","submitData","editableData","_this2","tableHeader","Components_EnterData","ShowTable","finalData","datas","ParentComponent","isSubmitted","isDataSubmitted","0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","Components_ColumnCreator","Components_TableEntry","showTable","App","className","Components_ParentComponent","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.94f119d8.chunk.js","sourcesContent":["import  React from 'react';\nimport '../App.css';\nimport { MultiSelectComponent } from '@syncfusion/ej2-react-dropdowns';\n\n class MultiSelect extends React.Component{\n  // define the array of data\n  constructor(props){\n      super(props);\n    this.state = {\n        multiValue: []\n    }  \n}\nhandleMultiValue = this.props.handleMultiValue;\n\n  onChangeHandler = (e) =>{\n    this.setState({\n    multiValue : e.value,  // e.value has the entered data\n    },this.handleMultiValue(this.state.multiValue)); // setState callBack calls handleMultiValue\n    \n  }\n   sportsData = ['Badminton', 'Basketball', 'Cricket', 'Football', 'Golf', 'Gymnastics', 'Hockey', 'Rugby', 'Snooker', 'Tennis'];\n  render() {\n    return (\n        // specifies the tag for render the MultiSelect component\n    <div id=\"mtselement\">\n      <MultiSelectComponent  name=\"multiValue\"  \n      value = {this.state.multiValue}  dataSource={this.sportsData} \n      allowCustomValue={true} placeholder=\"Select Multiple Values\"\n      change = {this.onChangeHandler} />\n    </div>\n    );\n  }\n}\nexport default MultiSelect;"," import React, { Component } from 'react';\n import MultiSelect from './MultiSelect.js';\n import '../App.css';\n\n class ColumnCreator extends Component{\n     constructor(props){\n         super(props);\n         this.intialState = {\n             colType:'date',\n             colName : \"\",\n             multiValue: \"\"\n            }\n        this.state = this.intialState;\n        }\n    // Handling form Inputs\n     handleChange = e =>{\n         this.setState({\n             [e.target.name]: e.target.value\n         })  \n     }\n    //  handling multiSelect values from multiselect component\n     handleMultiValue = (data) =>{\n            data = [\"Not Selected\",...data];  // \n         this.setState({\n             multiValue:data\n         })\n     }\n    //  triggers submitHeader function in parentComponent\n    addColumn = () =>{\n        this.props.addHeaders(this.state);\n        this.setState(this.intialState);\n     }\n     //calls props method\n     submitColumn = () =>{\n         this.props.submitHeader();\n     }\n    \n     render(){\n         return(\n             <div>\n                 <h4> Create Column</h4>\n                 <form>\n                    <label>Column Name: </label>\n                    <input type=\"text\" \n                     name = \"colName\" \n                     value = {this.state.colName}\n                     placeholder = \"Column Name\"\n                     onChange = {this.handleChange}/>\n\n                    <label id= \"colHeader\">Column Type: </label>\n                    <select value = {this.state.type}\n                     name = \"colType\" \n                     onChange = {this.handleChange}>\n                    <option defaultValue value = \"date\">Date</option>\n                    <option value = \"number\">Number</option>\n                    <option  value = \"multiSelect\">Multiselect</option>\n                    </select> \n                  {/* Conditional rendering of Multi Select using ternary operator */}\n                  {\n                    this.state.colType === \"multiSelect\" ?\n                   <MultiSelect handleMultiValue = {this.handleMultiValue} />\n                    :null \n                  }   \n                    <br></br>\n                    {/* triggers add Column function whwn clicking */}\n                    <input type = \"button\" id=\"addColumnBtn\"value = \"Add Column\" onClick = {this.addColumn} /> \n                    <br></br>\n                    <input type = \"button\" id=\"submitColumnBtn\" value = \"Submit Columns\" onClick = {this.submitColumn} /> \n                 </form>\n             </div>\n         );\n     }\n }\n\n export default ColumnCreator;","import React, { Component } from 'react';\n\nclass EnterData extends Component{\nconstructor(props){\nsuper(props);\nthis.state = {\n     colType : props.colType,\n     multiValue : props.multiValue,\n     a1: props.key1,\n     a2: props.key2,\n     writeData: props.writeData\n    }   \n}\n// Handling input events\nhandleChange = e =>{\n    e.preventDefault();\n    this.setState({\n        localdata: e.target.value\n    }, this.sendData);  // callback function sendData()\n  }\n// calling props method => writeData with params of cell address and data\nsendData = () => {\n    this.state.writeData(this.state.a1,this.state.a2,this.state.localdata);\n}\n   \n\n    render(){\n        if(this.state.colType===\"multiSelect\") { \n            return(   \n           <td>\n           <select id=\"fooSelect\" onChange= {this.handleChange} >\n               {\n                   this.state.multiValue.map((data,index)=>\n                     <option key ={index} value={data}>{data}</option> )\n               }\n           </select>\n           </td> )\n        }\n        else{\n            return(            \n                <td>\n                <input type ={this.state.colType} placeholder={this.state.colType} onChange = {this.handleChange}/>\n                </td> )\n          }                  \n       \n    }\n}\nexport default EnterData;","import React from 'react';\nimport '../App.css';\nconst TableHeader = (props) => {\nconst tData = props.tableData;\n// returns thead for table    \nreturn(\n    tData.map((data,index)=>          \n        <thead key={index}>\n            <tr>\n                <th id=\"theader\">{data.colName.toUpperCase()}</th>\n            </tr>\n        </thead>\n     )\n);\n    \n}\n\nexport default TableHeader;","import React, { Component } from 'react';\nimport EnterData from './EnterData';\nimport TableHeader from './tableHeader';\n\nimport '../App.css';\n\nclass TableEntry extends Component{\n    constructor(props){\n        super(props);\n        this.state={\n            tableData : props.tableData,\n            editableData: props.editableData, // To create default 20 rows\n            enteredData:[],\n            submitData: props.submitData\n        }\n    }\n\n    // Temporary local array of twenty to hold the entered data\n    editableDataLocal = [\n        [],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[] \n    ]\n\n    // Writing returned values from enterData() to local array\n  writeData = (index1,index2,data)=>{ \n     this.editableDataLocal[index1][index2] =  data ;\n  }\n    //  Triggered while submit button hits \n  submitTable = () => {\n      this.setState({\n          enteredData : this.editableDataLocal\n      },this.displayTable); //callback displayTable()    \n  }\n\n  displayTable = () =>{\n    //   console.log(this.state.enteredData);\n      this.state.submitData(this.state.enteredData); // triggers props method submitData()\n  }\n    \n    render(){\n      \n        return(\n            <div>\n            <table id=\"editTable\">\n                  <TableHeader tableData = {this.state.tableData}/>                   \n                   <tbody>\n                     {\n                         this.state.editableData.map((data,index1)=> //[ map1 ] mapping 20 rows matrix format\n                         <tr key={index1}>\n                            {this.state.tableData.map((data,index2)=>    //[ map2 ] mapping columns for each row\n                                <EnterData key= {index2} key1={index1}  key2={index2}\n                                colType = {data.colType} multiValue = {data.multiValue}\n                                writeData = {this.writeData} />\n                            ) // end of [ map2 ]\n                            }\n                         </tr>\n                        ) // end of [ map1 ]                 \n                    }\n                    </tbody>\n            </table>\n            <br></br>\n            <input type = \"button\" id=\"submitTableBtn\" value = \"Submit Table\" onClick = {this.submitTable} /> \n            <br></br>\n            </div>\n\n        );\n    }\n}\n\nexport default TableEntry;","import React from 'react';\nimport '../App.css';\n// mapping datas from tableData into new table\nconst ShowTable = props =>{\n const finalData = props.finalData;\nreturn(\n    finalData.map((data,index)=>{\n       return (\n       <tr key={index}>\n         {\n             data.map((datas,index)=>{\n                return <td id=\"showTableTd\" key={index}> {datas} </td>\n             })\n        \n        }\n        </tr>\n        ) // end of inner return\n    }) // end of outer map   \n); // end of outer return\n}\n\nexport default ShowTable;","import React, { Component } from 'react'\nimport ColumnCreator from './ColumnCreator';\nimport TableEntry from './TableEntry';\nimport ShowTable from './showTable';\nimport TableHeader from './tableHeader';\n\nclass ParentComponent extends Component{\n    state = {\n        tableData:[],\n        isSubmitted: false,\n        isDataSubmitted:false,\n        editableData: [     // To create default 20 rows\n            {0 : \"\"},\n            {1: \"\"},\n            {2: \"\"},\n            {3: \"\"},\n            {4: \"\"},\n            {5: \"\"},\n            {6: \"\"},\n            {7: \"\"},\n            {8: \"\"},\n            {9: \"\"},\n            {10: \"\"},\n            {11: \"\"},\n            {12: \"\"},\n            {13: \"\"},\n            {14: \"\"},\n            {15: \"\"},\n            {16: \"\"},\n            {17: \"\"},\n            {18: \"\"},\n            {19: \"\"}\n        ],\n        enteredData : []\n    }\n    \n    addHeaders =(e) =>{  // Appending new state from columnCreator to tabelData[]\n        // console.log(\"column Headers Added\");\n        this.setState({tableData:[...this.state.tableData,e]}); // merge using spread Operator\n    }\n    // mounts TableEnty component\n    submitHeader = () =>{ \n        this.setState({isSubmitted:true});\n        // console.log(\"column headers submitted\");\n    }\n\n    //Handling submitted data from TableEntry\n    submitData = (data) => {\n        this.setState({\n            enteredData : data,\n            isDataSubmitted:true\n        })\n    }\n    render(){\n        return(\n            <div>\n                <ColumnCreator \n                addHeaders={this.addHeaders}\n                submitHeader = {this.submitHeader}\n                />\n             <br></br>\n             <div id=\"breaker\"></div>\n                {this.state.isSubmitted ? \n                <div>\n                    <TableEntry tableData = {this.state.tableData} \n                    editableData = {this.state.editableData} submitData = {this.submitData}/>\n                 </div>\n                 : null\n                }\n                <br></br>\n\n                {\n                    this.state.isDataSubmitted ?\n                    <div id=\"breakerUp\">\n                    <table id = \"showTable\">\n                        <TableHeader tableData = {this.state.tableData} />\n                        <tbody>\n                        <ShowTable  finalData= {this.state.enteredData}/> \n                        </tbody>\n                    </table>\n                    </div>\n                     : null\n                }\n            </div>\n        )\n    }\n}\n\nexport default ParentComponent;","import React, { Component } from 'react';\nimport ParentComponent from './Components/ParentComponent';\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <h1 id = \"snippt\"> Snippt-Task :  Table Creator  </h1>\n        <div id=\"breaker\"></div>\n        <br></br>\n        <ParentComponent />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}